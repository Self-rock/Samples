#include <iostream>
#include <iomanip>

int main(int argc, char const *argv[])
{
    //вывод с заданной сточностью знаков после запятой
    double a =4.5465465654654;
    std::cout<<"a="<< std::fixed<<std::setprecision(2)<<a<<"\n";
/*setprecision устанавливает «количество цифр», 
которое в зависимости от состояния std::fixed может быть либо «значащими цифрами», 
либо «цифрами после запятой», либо «цифрами после шестнадцатеричного разряда»*/


    double answer=5.9999;
    double answer2=55.1000;
    std::cout<<std::setprecision(2)<<std::fixed;
    std::cout <<"answer="<<answer << std::endl;
std::cout<<std::setprecision(0)<<std::fixed;//сбрасываем точность после запятой
    std::cout <<"answer2="<<answer2 << std::endl;

/*
    Для заполнения вывода cout не значащими символами можно использовать конструкцию  
    <<std::setfill('0') << std::setw(2)<<"выводимое с заполнением незначащими символами поле". 
    конструкция добавляется для каждого такого поля.

    std::setw(2) Указывает ширину поля отображения для следующего элемента в потоке
    std::setfill('0') Задаёт символ, который будет использоваться для заполнения пробелов при выравнивании по правому краю
*/


    //для установки локали для терминала, перед cin cout применить
    //system("chcp 65001");//для utf8 , или другую локаль, в которой сохранены исходники

    /*
    не проверено
    cout.setf(ios::fixed);
    cout.setf(ios::showpoint);
    cout.precision(2);
    */
   
    /*
    //работают как на ввод так и на вывод
    <<dec //ввод-вывод в десятичной системе счисления (по умолчанию)
    <<hex //ввод-вывод в шестнадцатеричной системе счисления (для целых чисел)
    <<oct   //ввод-вывод в восьмеричной системе счисления (для целых чисел)

    <<setbase(int base)   //установить базу системы счисления равной параметру base (base может быть 8, 10 или 16).
Только для вывода целых чисел

    <<setw(int w)   //установить ширину поля для вывода числа равной w.Если эта ширина больше, чем размер числа, 
    то слева добавляются символы-заполнители (по умолчанию пробелы).  Если же заданная ширина меньше, чем требуется для числа,
    то число все равно выводится полностью.

    <<setprecision(int p)   //задать число цифр после десятичной точки. Действует для всех последующих операций вывода,
    пока не будет произведена другая установка точности.

    <<setfill(char ch)  //установить символ заполнения равным ch (по умолчанию используются пробелы)

    <<fixed //вывод вещественных чисел в формате с  фиксированной точкой

    <<scientific    вывод вещественных чисел в формате с плавающей точкой
    
    //выравнивание в поле по левому или правому краю  << std::left   или << std::right
    for(int i=0; i<50; ++i)  {
        if(i%2) std::cout<< std::setw(7)<< std::left << i << std::endl;
        else std::cout<< std::setw(7)<< std::right << i << std::endl;
    }
    
    */



    /*
    //Создаем структуру Str с полями инт и стринг
    struct Str{
    int a;
    string str;
    };

    //определение оператора ввода объекта
    istream& operator>>(istream& in, Str& s){
    in>>s.a>>s.str;
    return in;
    }

    //определение опереатора вывода объекта
    ostream& operator<<(ostream& out, Str& s){
    out<<s.a<<" "<<s.str<<" ";
    return out;
    }

    Str s;
    //ввод
    cout<<"Введите через пробел число и строку"<<endl;
    cin>>s;
    
    //вывод
    cout<<s;
    */

// цветные символы в консоли... работает так себе
    constexpr auto red    = "\033[31m";
    constexpr auto green  = "\033[32m";
    constexpr auto yellow = "\033[33m";
    constexpr auto reset  = "\033[0m";
    // вернуть обычный цвет

    system("chcp 65001");
    std::cout << green  << "✔️ Всё прошло успешно" << reset << '\n';
    std::cout << yellow << "… Загружаем данные"   << reset << '\n';
    std::cerr << red    << "✖️ Ошибка подключения" << reset << '\n';



    /*перенаправление cout в файл и cin из файла
    freopen("input.txt", "r", stdin); //открытие файла и чтение из него (не проверено)

    freopen("output.txt", "w", stdout); // перенаправление cout в файл
    */
    
    //вывод имени переменной в выводе
    #define debug(x) std::cout <<"Переменная " <<(#x)<<" = "<< x <<std::endl;
    int aa =18;
    debug(aa);
    struct A{int z; float y;};
    A q;
    debug(q.y);
    debug(q.z);

    
    return 0;
}
